.. _muscle(emg)-bioamp-arduino-firmware:

Muscle (EMG) BioAmp Firmware
###############################

**What is Electromyography (EMG)?**

Electromyography (EMG) `[1] <https://www.hopkinsmedicine.org/health/treatment-tests-and-therapies/electromyography-emg>`_ is a technique for evaluating and recording the electrical activity produced by skeletal muscles.
EMG is performed using an instrument called an electromyograph to produce a record called an electromyogram. 
An electromyograph detects the electric potential generated by muscle cells
when these cells are electrically or neurologically activated. The signals can be analyzed to detect abnormalities,
activation level, or recruitment order, or to analyze the biomechanics of human or animal movement.
In computer science, EMG is also used as middleware in gesture recognition towards allowing the input of physical action to a computer as a form of human-computer interaction.

To know more about EMG `visit here <https://en.wikipedia.org/wiki/Electromyography>`_.

**Who is this for?**

Anyone who's using the BioAmp Muscle Hardware for the very first time ‚Äî whether you're a student, hobbyist, educator, or just curious. No experience needed!

üëâ To learn about our BioAmp Hardware checkout :ref:`the hardware page <upsidedownlabs_hardware_home>`.

Step-by-Step Setup Guide
===========================

With the hardware in your hands, you're just a few steps away from unlocking its full potential ‚Äî let's get the software set up!

**Step 1: Downloading GitHub Repository for Hardware**

- This is the code your Arduino needs to read Muscle (EMG) signals.
- You have two easy ways to get the code that will help you read your EMG signals:

.. dropdown:: Simply Download (recommended for beginners)
    :open:

    - Go to the GitHub page: https://github.com/upsidedownlabs/Muscle-BioAmp-Arduino-Firmware
    - Click the green ‚Äú**Code**‚Äù button > Download ZIP
    - Unzip the folder and save it somewhere easy to find.

.. dropdown:: Clone using Git (for tech-savvy users)

      - Install Git for your OS: https://git-scm.com/
      - Clone this GitHub repository using
      
        .. code-block:: bash
            
            git clone https://github.com/upsidedownlabs/Muscle-BioAmp-Arduino-Firmware

**Step 2: Application Required**

Before you start using the kit, please download or open the following: 

1. **Arduino IDE** 
   
   - We need Arduino IDE to upload code to your Arduino board
   - Link to donwload IDE for your OS: https://www.arduino.cc/en/software

2. **Chords Website**
   
   - We will use Chords Website to visualize the Muscle Signals!
   - Open this website: https://chords.upsidedownlabs.tech

.. _Connect Your Hardware:

**Step 3: Connect Your Hardware**

1. Plug the Hardware into your Arduino UNO using jumper wires.
2. Follow the exact wiring diagram from the :ref:`hardware documentation <upsidedownlabs_hardware_home>` of the hardware you are using.

It‚Äôs just like putting together a puzzle!

**Step 4: Prepare the Electrodes**

There are two ways use Gel Electrods or Muscle BioAmp Band.

üëâ For detailed skin prep visit: :ref:`Skin Preparation Guide <skin-preparation>`

- **Using Gel Electrodes:**

1. Place the 3 gel electrodes on a clean surface.
2. Prepare the skin where you'll place them.
3. Use an alcohol swab or Nuprep Gel to clean the area (this helps get clearer signals).
4. Find your ulnar nerve area on your forearm (check diagram in docs).
5. Attach the electrodes:
   

   - `+` (positive) and `-` (negative) on the forearm.
   - `REF` (reference) on the back of your hand or elbow.

Make sure the sticky side of electrodes touches your skin firmly.
 
- **Using Muscle BioAmp Band:**

1. Connect the BioAmp cable to Muscle BioAmp Band in a way such that IN+ and IN- are placed on the arm near the ulnar nerve & REF (reference) on the far side of the band.
2. Now put a small drop of electrode gel between the skin and metallic part of BioAmp cable to get the best results



.. _How to upload the Code to Arduino:

**Step 5: How to upload the Code to Arduino**

1. Open the folder you downloaded: **Muscle-BioAmp-Arduino-Firmware**
2. Inside that, you‚Äôll find several subfolders.
3. Pick the folder for the experiment you want to try. (For beginners: start with the first one and move step-by-step through the others for a better learning experience )
4. Inside that folder, open the **.ino** file using **Arduino IDE**
   
- For example:

  - To try raw signal: open ``01_Fixed_Sampling.ino``
  - To try filtered signal: open ``02_EMG_Filter.ino``

.. note::
    You'll find all the experiments listed below, each with :ref:`step-by-step instructions<experiments step by step>`. Just scroll to the one you're working on to get started with the right setup.


5. Inside that folder, open the **.ino** file using **Arduino IDE**
   
6. Connect Your Arduino

   - Plug your Arduino board into your computer‚Äôs USB port using the USB cable.
   - Wait for the operating system to install any required USB drivers.

7. In Arduino IDE:

   - Go to **Tools > Board > Arduino UNO** choose the model of your board (e.g., ‚ÄúArduino Uno‚Äù or ‚ÄúArduino Nano‚Äù if you wired to a Nano)
   - Go to **Tools > Port > [select the correct COM port]**

8.	Verify (Compile) the Sketch

        - Click the **‚Äú‚úîÔ∏è Verify‚Äù** button (or press ``Ctrl + R``).
        - Wait for **‚ÄúDone compiling.‚Äù** If errors appear, double-check you opened the correct .ino file.

9.  Click the **‚úì** Upload (or press ``Ctrl + U``) button to send the code to your Arduino.  

    - The IDE will compile again and then send the code to your board.
    - The onboard LED labeled **‚ÄúL‚Äù** may blink during upload. When you see **‚ÄúDone uploading‚Äù**, the new firmware is running.


10.	Open Serial Monitor

        - In the IDE, click **Tools ‚Üí Serial Monitor** (or press ``Ctrl + Shift + M``).
        - Ensure the baud rate at the bottom right of the Serial Monitor is set to ``115200`` (or whatever the sketch‚Äôs Serial.begin(115200); line specifies).
        - You should start seeing lines of numbers. Those are your readings.

.. _Visualize Your Muscle Signals!:

**Step 6: Visualize Your Muscle Signals!**

1. Open this website: https://chords.upsidedownlabs.tech
2. Click: Visualize Now ‚Üí then choose Serial Wizard.
3. Select the correct COM port (same one from Arduino IDE).
4. Click Connect.

üéâ Now move your hand or clench your fist ‚Äî you‚Äôll see real-time EMG waves on the screen!

.. important:: 
    
    Always disconnect your laptop charger while testing. Why? Charging can introduce 50 Hz noise that affects the signal.

.. _experiments step by step:

Let's explore all the experiments step by step
===============================================
.. Experiment 1

.. dropdown:: 1. Fixed Sampling
    :open:
    
    **1. Program Purpose & Overview**

    The Fixed Sampling sketch demonstrates continuous, regular‚Äêinterval sampling of raw EMG (electromyography) 
    voltage readings from a Muscle BioAmp sensor. By reading analog voltage at a fixed rate 
    (for example, 500 samples per second), you get a stable stream of unfiltered EMG data. 
    This acts as the foundation for every subsequent signal-processing demonstration. 
    Beginners can see what ‚Äúraw‚Äù muscle signals look like before any filtering or envelope detection.

    **2. How It Works**

    1. Initialize the Sensor Pin    
         
       - The sketch sets an Arduino analog input pin (e.g., A0) to read voltage values from the BioAmp sensor.

    2. Set Sampling Rate

       - A timer (using ``micros()`` or ``delayMicroseconds()``) ensures that we call ``analogRead(A0)`` at a precise interval.
       - For instance, reading every 2 millisecond ‚Üí ~500 Hz sampling.

    3. Print Raw Values

       - The user sees raw voltage fluctuations corresponding to muscle contractions.

    4. Loop Forever

       - The ``loop()`` continues indefinitely, constantly reading and printing.
  
    **3. Perform the Hardware**
    
    - Refer to wiring as per instructions given in :ref:`Connect Your Hardware<Connect Your Hardware>`

    **4. Firmware Upload**

    - For this project, navigate to the repository folder (Muscle-BioAmp-Arduino-Firmware/01_Fixed_Sampling) and select ``01_Fixed_Sampling.ino``.
    - To upload firmware, refer to :ref:`How to upload the Code to Arduino<How to upload the Code to Arduino>`
    
    **5. Visualize your signal**

    - Follow the steps given in :ref:`Visualize Your Muscle Signals!<Visualize Your Muscle Signals!>` 
  
    **6. Running & Observing Results**

    - No Muscle Contraction ‚Üí Raw values will show noise like spikes.
    - Flex Muscle ‚Üí Suddenly values jump up or down.
    - Relax Muscle ‚Üí Values return toward the midpoint.


    .. Experiment 2

.. dropdown:: 2. EMG Filter
 
    **1. Program Purpose & Overview**

    The EMG Filter sketch acquires raw EMG data from a Muscle BioAmp sensor and applies a band‚Äêpass filter 
    (approximately 74.5 Hz‚Äì149.5 Hz) to isolate the muscle signal. 
    By removing low‚Äêfrequency motion artifacts and high‚Äêfrequency noise, you get a cleaner, more stable EMG stream. 
    This filtered output is ideal for downstream tasks like envelope detection or device control.

    **2. How It Works**

    1. Initialize the Sensor Pin    
            
       - The sketch configures an Arduino analog input pin (e.g., A0) to read voltage values from the BioAmp sensor.

    2. Set Sampling Rate

       - A timer (using ``micros()`` or ``delayMicroseconds()``) ensures that we call ``analogRead(A0)`` at a precise interval.
       - For instance, reading every 2 millisecond ‚Üí ~500 Hz sampling.

    3. Apply Band‚ÄêPass Filter
        
       - Each new analog reading is passed through a digital filter (typically implemented via FIR or IIR coefficients). The filter code maintains small arrays (buffers) of recent inputs and outputs, computing a weighted sum to produce a filtered value.
   
    4. Print Raw Values

       - The resulting filtered floating‚Äêpoint value is sent over Serial (e.g., Serial.print(filteredValue);), so you see a smooth EMG waveform.

    5. Loop Forever

       - The ``loop()`` repeats indefinitely: read ‚Üí filter ‚Üí print ‚Üí delay to maintain sampling rate.

    - To learn more about filters and how to generate new filters, visit:  https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.butter.html

    **3. Perform the Hardware**

    - Refer to wiring as per instructions given in :ref:`Connect Your Hardware<Connect Your Hardware>`

    **4. Firmware Upload**

    - For this project, go to the repository folder (Muscle-BioAmp-Arduino-Firmware/02_EMG_Filter) and select ``02_EMG_Filter.ino``.
    - To upload firmware, refer to :ref:`How to upload the Code to Arduino<How to upload the Code to Arduino>`
    
    **5. Visualize your signal**

    - Follow the steps given in :ref:`Visualize Your Muscle Signals!<Visualize Your Muscle Signals!>` 

    **6. Running & Observing Results**

    - No Muscle Contraction ‚Üí Filtered output hovers near zero (small baseline noise).
    - Flex Muscle ‚Üí You see smooth spikes in the filtered value (e.g., jumps to 0.05‚Äì0.10), with noise removed.
    - Relax Muscle ‚Üí Filtered output returns to baseline smoothly, with minimal fluctuation.

.. Experiment 3

.. dropdown:: 3. EMG Envelope
 
    
    **1. Program Purpose & Overview**

    The EMG Envelope sketch reads raw EMG data, applies a band‚Äêpass filter (‚âà 74.5 Hz‚Äì149.5 Hz), 
    then computes the envelope of the filtered signal. The envelope is a smoothed, rectified representation 
    of muscle activation amplitude. It is commonly used in prosthetic control, robotics, and biomedical 
    research to detect when a muscle is contracting and with what strength.

    **2. How It Works**

    1. Initialize the Sensor Pin    
            
       - Read analog values on A0 at a fixed rate (e.g., 500 Hz) and pass each sample through a digital band‚Äêpass filter (implemented via FIR or IIR coefficients).

    2. Full‚ÄêWave Rectification

       - Convert the filtered sample to its absolute value:
    
    ::
        
        float rectified = abs(filteredValue);

    3. Low‚ÄêPass (Smoothing) Filter
        
       - Apply a simple moving average or exponential moving average to rectified to generate a smooth envelope:

    ::

        static float prevEnvelope = 0;

        float alpha = 0.1;
        
        float envelope = alpha * rectified + (1 - alpha) * prevEnvelope;
        
        prevEnvelope = envelope;

    4. Print Envelope

       - Send the smoothed envelope value via Serial.

    5. Loop Forever

       - The ``loop()`` repeats indefinitely: read ‚Üí  filter ‚Üí rectify ‚Üí smooth ‚Üí print ‚Üí delay to maintain sampling rate.

    **3. Perform the Hardware**

    - Refer to wiring as per instructions given in :ref:`Connect Your Hardware<Connect Your Hardware>`

    **4. Firmware Upload**

    - For this project, navigate to the repository folder (Muscle-BioAmp-Arduino-Firmware/03_EMG_Envelope) and select ``03_EMG_Envelope.ino``.
    - To upload firmware, refer to :ref:`How to upload the Code to Arduino<How to upload the Code to Arduino>`

    **5. Visualize your signal**

    - Follow the steps given in :ref:`Visualize Your Muscle Signals!<Visualize Your Muscle Signals!>` 

    **6. Running & Observing Results**

    - Relaxed Muscle ‚Üí Envelope values stay near zero.
    - Slow Flex ‚Üí Envelope gradually increases.
    - Strong Flex ‚Üí Envelope peaks higher.
    - Envelope changes smoothly, making thresholds easy to detect.

.. Experiment 4

.. dropdown:: 4. Claw Controller
 
        
    **1. Program Purpose & Overview**

    The Claw Controller sketch uses EMG envelope data to drive a servo‚Äêpowered ‚Äúclaw‚Äù mechanism. 
    As you flex your muscle, the servo closes the claw; when you relax, it opens. 
    This demonstrates a simple bio‚Äêcontrolled prosthetic or robotic gripper, 
    illustrating how EMG signals can be translated into mechanical movement.
    
    **2. How It Works**

    1. Acquire & Filter (as in EMG_Filter) to obtain a filtered EMG value at ~500 Hz.

    2. Compute Envelope (as in EMG_Envelope) by rectifying and smoothing the filtered sign

    3. Map Envelope to Servo Angle
        
       - Adjust scaling constants so that typical muscle contractions map to 0‚Äì180¬∞.
        
    ::
        
        int angle = map(envelope * 1000, 0, 100, 0, 180);

    4. Servo Control
   
    ::

        #include <Servo.h>
        Servo clawServo;
        ...
        clawServo.attach(9);  // PWM pin 9
        clawServo.write(angle);


    5. Loop Forever

       - The ``loop()`` repeats indefinitely: read ‚Üí filter ‚Üí envelope ‚Üí map ‚Üí write to servo ‚Üí delay.
       

    **3. Perform the Hardware**

    - Refer to wiring as per instructions given in :ref:`Connect Your Hardware<Connect Your Hardware>`
    - Additionally connect:
  
      - Servo VCC (Red) ‚Üí Arduino 5 V (or external 5 V supply for stable power)
      - Servo GND (Black/Brown) ‚Üí Arduino GND (and common ground if external supply used)
      - Servo Signal (Yellow/Orange) ‚Üí Arduino D9 (PWM pin)

    **4. Firmware Upload**

    - For this project, navigate to the repository folder (Muscle-BioAmp-Arduino-Firmware/04_Claw_Controller) and select ``04_Claw_Controller.ino``.
    - To upload firmware, refer to :ref:`How to upload the Code to Arduino<How to upload the Code to Arduino>`
    
    **5. Visualize your signal**

    - Follow the steps given in :ref:`Visualize Your Muscle Signals!<Visualize Your Muscle Signals!>` 

    **6. Running & Observing Results**

    - Relaxed Muscle ‚Üí Servo rests at minimum angle (often 0¬∞ or defined ‚Äúopen‚Äù position).
    - Moderate Flex ‚Üí Servo moves partway (e.g., 90¬∞).
    - Strong Flex ‚Üí Servo moves to maximum (180¬∞, claw fully closed).
    - Relax ‚Üí Servo returns to open angle. Adjust mapping if directions are inverted.

    **7. Extra Libraries Needed**: ``Servo.h (built‚Äêin)``

    .. note::
        You may also visit our Instructables page for detailed guide: https://www.instructables.com/Controlling-a-Servo-Claw-With-Muscle-Signals-EMG-U/

.. dropdown:: 5. Servo Control
 
        
    **1. Program Purpose & Overview**

    The Servo Control sketch is a generic demonstration of using EMG envelope amplitude to drive a 
    single servo motor. Instead of a claw mechanism, it maps envelope directly to any servo‚Äôs rotation angle.
    This example can be repurposed to control robotic arms, wheels, or any servo‚Äêdriven structure based on 
    muscle effort.
    
    **2. How It Works**

    1. Acquire & Filter EMG on A0 at ~500 Hz (same filter as EMG_Filter).

    2. Compute Envelope by rectifying and smoothing the filtered value.

    3. Map Envelope to Servo Angle
        
       - Tweak constants so typical contractions cover the desired servo range.
        
    ::
        
        int angle = map(envelope * 1000, 0, 100, 0, 180);

    4. Servo Control
   
    ::

        #include <Servo.h>
        Servo myServo;
        ...
        myServo.attach(9);
        myServo.write(angle);


    5. Loop Forever

       - The ``loop()`` repeats indefinitely: read ‚Üí filter ‚Üí envelope ‚Üí map ‚Üí write ‚Üí delay.
       

    **3. Perform the Hardware**

    - Refer to wiring as per instructions given in :ref:`Connect Your Hardware<Connect Your Hardware>`
    - Additionally connect:
  
      - Servo VCC (Red) ‚Üí Arduino 5 V (or external 5 V supply for stable power)
      - Servo GND (Black/Brown) ‚Üí Arduino GND (and common ground if external supply used)
      - Servo Signal (Yellow/Orange) ‚Üí Arduino D9 (PWM pin)

    **4. Firmware Upload**

    - For this project, navigate to the repository folder (Muscle-BioAmp-Arduino-Firmware/05_Servo_Control) and select ``05_Servo_Control.ino``.
    - To upload firmware, refer to :ref:`How to upload the Code to Arduino<How to upload the Code to Arduino>`
    
    **5. Visualize your signal**

    - Follow the steps given in :ref:`Visualize Your Muscle Signals!<Visualize Your Muscle Signals!>` 

    **6. Running & Observing Results**

    - Relaxed Muscle ‚Üí Servo rests at minimum angle (often 0¬∞ or defined ‚Äúopen‚Äù position).
    - Flex Gently ‚Üí Servo moves gradually between 0¬∞ and 180¬∞, proportional to muscle strength.
    - Strong Flex ‚Üí Servo moves to maximum (180¬∞).
    - Relax ‚Üí Servo returns to open angle. Adjust mapping if directions are inverted.

    **7. Extra Libraries Needed**: ``Servo.h (built‚Äêin)``

.. dropdown:: 6. LED BarGraph
 
    **1. Program Purpose & Overview**

    The LED_BarGraph sketch visualizes muscle activation by lighting up a row of LEDs in proportion to EMG envelope
    amplitude. As contraction strength increases, more LEDs turn on (like a VU meter). 
    This provides immediate visual feedback without needing a computer.
    
    **2. How It Works**

    1. Acquire & Filter EMG on A0 at ~500 Hz (band‚Äêpass filter as in EMG_Filter).

    2. Compute Envelope by rectifying and applying a moving average.

    3. Scale Envelope to LED Count
    
    ::
        
        const int NUM_LEDS = 8;

        int numLit = map(envelope * 1000, 0, 100, 0, NUM_LEDS);

    4. Update LEDs
    
    - For each index ``i`` from ``0 to NUM_LEDS‚Äì1``:
  
    ::

        if (i < numLit) digitalWrite(ledPins[i], HIGH);
        else digitalWrite(ledPins[i], LOW);

    5. Loop Forever

       - The ``loop()`` repeats indefinitely: read ‚Üí filter ‚Üí envelope ‚Üí map ‚Üí set LEDs ‚Üí delay (e.g., 10 ms).
       

    **3. Perform the Hardware**

    - Refer to wiring as per instructions given in :ref:`Connect Your Hardware<Connect Your Hardware>`
    - Additionally connect:
  
      - Each LED‚Äôs anode ‚Üí 220 Œ© resistor ‚Üí Arduino digital pins D2‚ÄìD9.
      - Each LED‚Äôs cathode ‚Üí Arduino GND.
      - Tie all grounds together.

    **4. Firmware Upload**

    - For this project, navigate to the repository folder (Muscle-BioAmp-Arduino-Firmware/06_LED_BarGraph) and select ``06_LED_BarGraph.ino``.
    - To upload firmware, refer to :ref:`How to upload the Code to Arduino<How to upload the Code to Arduino>`
    
    **5. Visualize your signal**

    - Follow the steps given in :ref:`Visualize Your Muscle Signals!<Visualize Your Muscle Signals!>` 

    **6. Running & Observing Results**

    - Relaxed Muscle ‚Üí  Few or zero LEDs lit.
    - Flex Gently ‚Üí LEDs light up progressively from LED 1 to LED 8 as envelope increases.
    - Strong Flex ‚Üí All 8 LEDs are lit.
    - Relax ‚Üí LEDs turn off in descending order.

.. dropdown:: 7. Muscle Strength Game

    **1. Program Purpose & Overview**

    The **Muscle Strength Game** sketch is an interactive example that counts and displays how many times a
    user can flex their muscle above a certain threshold within a short interval. Think of it as a simple 
    ‚Äúscore counter‚Äù: each valid muscle contraction increases your score by one. This makes exercising or
    rehabilitation more engaging, since you get instant feedback when you reach each new rep.

    **2. How It Works**

    1.  **Read Raw EMG Value**

    - In ``setup()``, configure the analog input and Serial:
    
    ::
        
        pinMode(A0, INPUT);
        Serial.begin(115200);

    - This prepares analog pin **A0** to read voltage from the BioAmp sensor and opens Serial at **115200** baud.

    2.  **Set Sampling Interval**

        - Inside ``loop()``, enforce a consistent sampling rate (e.g., every 2 ms ‚Üí ~500 Hz):
    
    ::
        
        unsigned long currentMicros = micros();
        if (currentMicros - lastSampleMicros >= 2000) {  // 2000 ¬µs = 2 ms
            lastSampleMicros = currentMicros;
            int rawValue = analogRead(A0);
            // ‚Ä¶ process rawValue ‚Ä¶
        }

    3.  **Apply Band-Pass Filter**

        - Each ``rawValue`` (0‚Äì1023) is converted to a voltage and passed into a digital band-pass filter (FIR example):
        - The result ``filtered`` is a float representing the EMG signal with noise removed.

    ::
        
        const int FILTER_ORDER = 4;
        float b[FILTER_ORDER+1] = {0.0048, 0.0191, 0.0287, 0.0191, 0.0048};
        float xBuffer[FILTER_ORDER+1] = {0};
        
        // Shift input history
        for (int i = FILTER_ORDER; i > 0; i--) {
            xBuffer[i] = xBuffer[i - 1];
        }
        xBuffer[0] = (float)rawValue;  // Insert latest raw reading
        
        // Compute filtered output
        float filtered = 0;
        for (int i = 0; i <= FILTER_ORDER; i++) {
            filtered += b[i] * xBuffer[i];
        }

  
    4.  **Compute Envelope**

        - After filtering, calculate the envelope by rectification and smoothing.
        - This produces a gradual rise/fall correlating to muscle contraction intensity.
    
    ::
        
        float rectified = abs(filtered);
        float alpha = 0.1;  // smoothing factor between 0 and 1
        envelope = alpha * rectified + (1.0 - alpha) * previousEnvelope;
        previousEnvelope = envelope;

    

    5.  **Threshold Detection and Score Counting**

        - Define constants for threshold and debounce.
        - This logic:
  
          - Increments ``score`` only when ``envelope`` crosses above ``THRESHOLD`` and was previously below.
          - Enforces a cooldown so that sustained holds don‚Äôt register multiple counts.

    
    ::
        
        const float THRESHOLD = 0.020;         // Adjust based on muscle strength
        const unsigned long COOLDOWN_MS = 500; // Minimum time between valid counts, in ms

    - Maintain a Boolean flag ``belowThreshold`` and a timestamp ``lastCountTime``:
    
    ::
        
        unsigned long now = millis();
        
        if (envelope > THRESHOLD && belowThreshold && (now - lastCountTime) >= COOLDOWN_MS) {
            score++;
            lastCountTime = now;
            belowThreshold = false;   // Wait until envelope drops below threshold
        }
        if (envelope <= THRESHOLD) {
            belowThreshold = true;
        }

    6.  **Loop Forever**

    - The ``loop()`` function repeats indefinitely: read ‚Üí filter ‚Üí envelope ‚Üí threshold check ‚Üí update score ‚Üí print/update display ‚Üí delay

    **3. Perform the Hardware**

    - Refer to wiring as per instructions given in :ref:`Connect Your Hardware<Connect Your Hardware>`.
    - Additionally connect (if using an LCD and/or buzzer):
    
    - **BioAmp Sensor ‚Üí Arduino**  
        
      - BioAmp VCC ‚Üí Arduino 5 V  
      - BioAmp GND ‚Üí Arduino GND  
      - BioAmp OUT ‚Üí Arduino A0  

    - **Optional I¬≤C LCD**  
        
      - LCD VCC ‚Üí Arduino 5 V  
      - LCD GND ‚Üí Arduino GND  
      - LCD SDA ‚Üí Arduino A4 (Uno/Nano) or dedicated SDA pin  
      - LCD SCL ‚Üí Arduino A5 (Uno/Nano) or dedicated SCL pin  

    - **Optional Buzzer** (piezo)  
        
      - Buzzer + ‚Üí Arduino D10 (or any PWM-capable pin)  
      - Buzzer ‚Äì ‚Üí Arduino GND  

    - Tie all grounds together (Sensor GND, Arduino GND, LCD GND, Buzzer GND).

    **4. Firmware Upload**

    - For this project, navigate to the repository folder `07_Muscle_Strength_Game/` and select ``Muscle_Strength_Game.ino``.
    - To upload firmware, refer to :ref:`How to upload the Code to Arduino<How to upload the Code to Arduino>`
    - In this project you many also install **Install LCD Library (if using LCD)** by following the steps given below:

      - Go to **Sketch ‚Üí Include Library ‚Üí Manage Libraries‚Ä¶**  
      - Search for **‚ÄúLiquidCrystal I2C‚Äù** and install the version by **Frank de Brabander** (or an equivalent stable version).  
      - Confirm the I¬≤C address in code (e.g., ``0x27`` or ``0x3F``) matches your module.

    **5. Visualize Your Signal**

    - In the **Serial Monitor** as you flex your muscle, you will see lines such as:  
    
    ::

        ```
        Score: 1  
        Score: 2  
        Score: 3  
        ```  
    
    - Each time the envelope crosses the threshold after a cooldown, the printed score increments by one.

    - **Chords Web Application**  
    
    1. After uploading, open a Web Serial‚Äìcompatible browser (Chrome or Edge).  
    2. Go to [https://chords.upsidedownlabs.tech/](https://chords.upsidedownlabs.tech/) and click **Connect**. Grant permission for Web Serial.  
    3. In Chords, choose **‚ÄúEMG Strength Game‚Äù** from the menu.  
    4. You will see a live plot of the EMG envelope and the current score displayed. Each time your muscle contraction crosses the threshold, Chords increments the score.

    **6. Running & Observing Results**

    - **Relaxed Muscle** ‚Üí No score increment; the display remains at **Score: 0**.  
    - **First Contraction Above 0.020** ‚Üí Envelope crosses threshold, cooldown cleared ‚Üí score becomes **1**, printed to Serial or shown on LCD.  
    - **Cooldown Period** ‚Üí Holding above 0.020 does not increment again until envelope falls below 0.020 and 500 ms have passed.  
    - **Second Contraction** ‚Üí Relax below threshold, wait ‚â• 500 ms, flex above threshold again ‚Üí score becomes **2**.  
    - **Continue Reps** ‚Üí Each distinct flex increments the score by one.  
    - **Adjust Threshold** ‚Üí If your muscle is very strong, raise **THRESHOLD** (e.g., from 0.020 to 0.030). If weak, lower it (e.g., to 0.015).

.. dropdown:: 8. EMG Scrolling
 
    To be documented.

.. dropdown:: 9. 2 Channel LCD BarGraph
 
    To be documented.

.. dropdown:: 10. EMG Rehab Game
 
    To be documented.

.. dropdown:: 11. EMG Counter
 
    To be documented.

.. dropdown:: 12. 2 Channel EMG Game Controller
 
    To be documented.


‚úÖ **And That‚Äôs it!, Congrats on making your neuroscience project using BioAmp Hardware.**
